searchState.loadedDescShard("eyre", 0, "This library provides <code>eyre::Report</code>, a trait object based …\nIterator of a chain of source errors.\nCompatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code>\nProvides the <code>context</code> method for <code>Option</code> when porting from …\nThe default provided error report handler for <code>eyre::Report</code>.\nContains the error value\nCompatibility re-export of <code>Report</code> for interop with <code>anyhow</code>\nError Report Handler trait for customizing <code>eyre::Report</code>\nError indicating that <code>set_hook</code> was unable to install the …\nEquivalent to Ok::&lt;_, eyre::Error&gt;(value).\nContains the success value\nProvides the <code>ok_or_eyre</code> method for <code>Option</code>.\nThe core error reporting type of the library, a wrapper …\ntype alias for <code>Result&lt;T, Report&gt;</code>\nProvides the <code>wrap_err</code> method for <code>Result</code>.\nCompatibility re-export of <code>eyre</code> for interop with <code>anyhow</code> …\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nCompatibility re-export of wrap_err for interop with <code>anyhow</code>\nCompatibility version of <code>wrap_err</code> for creating new errors …\nDefine the report format\nManual hook which constructs <code>DefaultHandler</code>s.\nOverride for the <code>Display</code> format\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string.\nConstruct an ad-hoc error from a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the Handler for this Report.\nGet a mutable reference to the Handler for this Report.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nConstruct an iterator over a chain of errors via the <code>source</code>…\nTransform the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nThe lowest level cause of this error — this error’s …\nInstall the provided error hook for constructing …\nStore the location of the caller who constructed this …\nCompatibility re-export of wrap_err_with for interop with …\nCompatibility version of <code>wrap_err_with</code> for creating new …\nWrap the error value with a new adhoc error\nCompatibility re-export of <code>context</code> for porting from <code>anyhow</code> …\nCreate a new error from an error message to wrap the …\nWrap the error value with a new adhoc error that is …\nCompatibility re-export of <code>with_context</code> for porting from …")