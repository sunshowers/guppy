searchState.loadedDescShard("duct", 0, "Duct is a library for running child processes. Duct makes …\nThe central objects in Duct, Expressions are created with …\nA handle to a running expression, returned by the <code>start</code> …\nAn implementation detail of <code>cmd</code>, to distinguish paths from …\nAn incremental reader created with the <code>Expression::reader</code> …\nAdd a hook for modifying <code>std::process::Command</code> objects …\nCreate a command given a program name and a collection of …\nCreate a command with any number of of positional …\nSet the working directory where the expression will …\nSet a variable in the expression’s environment.\nRemove a variable from the expression’s environment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the expression’s entire environment, from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait for the running expression to finish, and then return …\nKill the running expression and await all the child …\nKill the underlying expression and await all the child …\nReturn a <code>Vec&lt;u32&gt;</code> containing the PIDs of all of the child …\nReturn a <code>Vec&lt;u32&gt;</code> containing the PIDs of all of the child …\nJoin two expressions into a pipe expression, where the …\nExecute an expression, capture its standard output, and …\nNote that if you don’t use <code>unchecked</code>, and the child …\nNote that if you don’t use <code>unchecked</code>, and the child …\nStart running an expression, and immediately return a …\nExecute an expression, wait for it to complete, and return …\nStart running an expression, and immediately return a …\nCapture the error output of an expression. The captured …\nUse an already opened file or pipe as error output for an …\nUse <code>/dev/null</code> (or <code>NUL</code> on Windows) as error output for an …\nOpen a file at the given path and use it as error output …\nJoin the standard error of an expression to its standard …\nUse bytes or a string as input for an expression, like <code>&lt;&lt;&lt;</code> …\nUse an already opened file or pipe as input for an …\nUse <code>/dev/null</code> (or <code>NUL</code> on Windows) as input for an …\nOpen a file at the given path and use it as input for an …\nCapture the standard output of an expression. The captured …\nUse an already opened file or pipe as output for an …\nUse <code>/dev/null</code> (or <code>NUL</code> on Windows) as output for an …\nOpen a file at the given path and use it as output for an …\nSwap the stdout and stderr of an expression.\nJoin the standard output of an expression to its standard …\nCheck whether the running expression is finished. If it …\nCheck whether the underlying expression is finished. This …\nPrevent a non-zero exit status from causing <code>run</code> or <code>read</code> to …\nUnix-specific extensions to duct, for sending signals.\nWait for the running expression to finish, and return a …\nSend a signal to all child processes running under this …")