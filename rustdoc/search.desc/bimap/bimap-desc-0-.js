searchState.loadedDescShard("bimap", 0, "A fast two-way bijective map.\nType definition for convenience and compatibility with …\nBoth the left and the right value existed in the bimap, …\nThe left value existed in the bimap, and the previous …\nNeither the left nor the right value previously existed in …\nThe previous left-right pairs, if any, that were …\nThe left-right pair already existed in the bimap, and the …\nThe right value existed in the bimap, and the previous …\nA bimap backed by two <code>BTreeMap</code>s.\nReturns a boolean indicating if the <code>Overwritten</code> variant …\nReturns the argument unchanged.\nA bimap backed by two <code>HashMap</code>s.\nCalls <code>U::from(self)</code>.\nA bimap backed by two <code>BTreeMap</code>s.\nAn owning iterator over the left-right pairs in a …\nAn iterator over the left-right pairs in a <code>BiBTreeMap</code>.\nAn iterator over a range of left-right pairs in a …\nAn iterator over the left values in a <code>BiBTreeMap</code>.\nAn iterator over a range of left-right pairs in a …\nAn iterator over the right values in a <code>BiBTreeMap</code>.\nRemoves all left-right pairs from the bimap.\nReturns <code>true</code> if the bimap contains the given left value …\nReturns <code>true</code> if the map contains the given right value and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the right value corresponding to …\nReturns a reference to the left value corresponding to the …\nInserts the given left-right pair into the bimap.\nInserts the given left-right pair into the bimap without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the bimap contains no left-right pairs, …\nCreates an iterator over the left-right pairs in the bimap …\nCreates an iterator over the left-right pairs lying within …\nCreates an iterator over the left values in the bimap in …\nReturns the number of left-right pairs in the bimap.\nCreates an empty <code>BiBTreeMap</code>.\nRemoves the left-right pair corresponding to the given …\nRemoves the left-right pair corresponding to the given …\nRetains only elements specified by a predicate\nCreates an iterator over the left-right pairs lying within …\nCreates an iterator over the right values in the bimap in …\nA bimap backed by two <code>HashMap</code>s.\nAn owning iterator over the left-right pairs in a <code>BiHashMap</code>…\nAn iterator over the left-right pairs in a <code>BiHashMap</code>.\nAn iterator over the left values in a <code>BiHashMap</code>.\nAn iterator over the right values in a <code>BiHashMap</code>.\nReturns a lower bound on the number of left-right pairs …\nRemoves all left-right pairs from the bimap.\nReturns <code>true</code> if the bimap contains the given left value …\nReturns <code>true</code> if the map contains the given right value and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the right value corresponding to …\nReturns a reference to the left value corresponding to the …\nInserts the given left-right pair into the bimap.\nInserts the given left-right pair into the bimap without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the bimap contains no left-right pairs, …\nCreates an iterator over the left-right pairs in the bimap …\nCreates an iterator over the left values in the bimap in …\nReturns the number of left-right pairs in the bimap.\nCreates an empty <code>BiHashMap</code>.\nRemoves the left-right pair corresponding to the given …\nRemoves the left-right pair corresponding to the given …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nCreates an iterator over the right values in the bimap in …\nShrinks the capacity of the bimap with a lower limit. It …\nShrinks the capacity of the bimap as much as possible. It …\nCreates a new empty <code>BiHashMap</code> with the given capacity.\nCreates a new empty <code>BiHashMap</code> with the given capacity, …\nCreates a new empty <code>BiHashMap</code> using <code>hash_builder_left</code> to …")