searchState.loadedDescShard("guppy", 0, "Track and query Cargo dependency graphs.\nDependencies used for build scripts.\nDeserialized Cargo metadata.\nA descriptor for the kind of dependency.\nDependencies used for development only.\nA builder for configuring <code>cargo metadata</code> invocations.\nNormal dependencies.\nAn “opaque” identifier for a package.\nA list of all the possible values of <code>DependencyKind</code>.\nRuns the configured <code>cargo metadata</code> and returns a parsed …\nParses this metadata and builds a <code>PackageGraph</code> from it.\nBuilds a <code>Command</code> instance. This is the first part of …\nSets the path to the <code>cargo</code> executable.\nSets the current directory of the <code>cargo metadata</code> process.\nContains types that describe errors and warnings that <code>guppy</code>…\nRuns the configured <code>cargo metadata</code> and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEntry point for analyzing Cargo dependency graphs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the path to <code>Cargo.toml</code>.\nCreates a default <code>cargo metadata</code> command builder.\nCreates a new <code>PackageId</code>.\nOutput information only about the workspace and do not …\nArbitrary flags to pass to <code>cargo metadata</code>. These will be …\nDeserializes this JSON blob into a <code>CargoMetadata</code>.\nSupport for dependencies that are only enabled on some …\nReturns the inner representation of a package ID. This is …\nSerializes this metadata into the given writer.\nReturns a string representing the kind of dependency this …\nThe warning occurred while adding dependency edges.\nThe warning occurred while adding edges for the <code>[features]</code> …\nAn error occurred while executing <code>cargo metadata</code>.\nAn error occurred while creating a custom platform.\nAn error occurred while creating a custom triple (in the …\nError type describing the sorts of errors <code>guppy</code> can return.\nDescribes the stage of construction at which a feature …\nAn internal error occurred within this <code>FeatureGraph</code>.\nDescribes warnings emitted during feature graph …\nA <code>cfg()</code> expression was invalid and could not be parsed.\nThe provided plain string (in the position that a <code>cfg()</code> …\nAn error occurred while parsing <code>cargo metadata</code> JSON.\nAn error occurred while serializing <code>cargo metadata</code> JSON.\nA feature that was requested is missing from a package.\nAn error occurred while constructing a <code>PackageGraph</code> from …\nAn internal error occurred within this <code>PackageGraph</code>.\nA self-loop was discovered.\nAn error that happened during <code>target-spec</code> parsing or …\nAn error was returned by <code>target-spec</code>.\nAn error occurred while serializing to TOML.\nA feature ID was unknown to this <code>FeatureGraph</code>.\nA package ID was unknown to this <code>PackageGraph</code>.\nWhile resolving a <code>PackageSetSummary</code>, some elements were …\nThe provided platform triple was unknown.\nWhile resolving a <code>PackageSetSummary</code>, an unknown external …\nA summary ID was unknown to this <code>PackageGraph</code>.\nA package specified by name was unknown to this workspace.\nA package specified by path was unknown to this workspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA description attached to the error.\nA description attached to the error.\nThe registry name that wasn’t recognized.\nThe summary for which the name wasn’t recognized.\nSummary IDs that weren’t known to the <code>PackageGraph</code>.\nThird-party packages that weren’t known to the …\nWorkspace packages that weren’t known to the <code>PackageGraph</code>…\nThe name of the dependency.\nThe feature name from which edges were being added.\nThe package ID for which edges were being added.\nThe package ID for which edges were being added.\nThe name of the feature.\nThe name of the feature for which the self-loop was …\nThe package ID for which the feature was requested.\nThe package ID for which the self-loop was discovered.\nThe stage of building the feature graph where the warning …\nThe string <code>&quot;?branch=&quot;</code>.\nA benchmark target with its name.\nA binary target with its name.\nThis build target is a binary target.\nA branch, e.g. <code>&quot;main&quot;</code>.\nA build script.\nA build target in a package.\nAn identifier for a build target within a package.\nThe type of build target (library or binary).\nThe string <code>&quot;crates-io&quot;</code>, indicating that a package can be …\nThe path to the crates.io registry.\nThe URL for the <code>crates.io</code> registry.\nContains information about dependency cycles.\nNot specified in <code>Cargo.toml</code>. Cargo treats this as the main …\nThe direction in which to follow dependencies.\nInformation about a specific kind of dependency (normal, …\nAn optional cache used to speed up <code>depends_on</code> queries.\nA write target for <code>Dot</code> graphs. Use with the <code>write!</code> macro.\nWhether a dependency or feature is required, optional, or …\nAn example target with its name.\nThis package is an external dependency.\nMore information about an external source.\nDependencies from this package to other packages.\nThe string <code>&quot;git+&quot;</code>.\nThis is a Git source.\nA <code>Cargo.toml</code> specification for a Git branch, tag, or …\nA library target.\nThis build target is a library or example, with the …\nA visitor used for formatting <code>dot</code> graphs.\nA graph of packages and dependencies between them, parsed …\nRepresents a dependency from one package to another.\nInformation about a specific package in a <code>PackageGraph</code>.\nLocations that a package can be published to.\nA query over a package graph.\nRepresents whether a particular link within a package …\nA set of resolved packages in a package graph.\nThe source of a package.\nThis package is a path dependency that isn’t in the …\nThis build target is a procedural macro.\nA randomly generated package resolver.\nThe string <code>&quot;registry+&quot;</code>.\nThe string <code>&quot;?rev=&quot;</code>.\nThis package can only be published to the listed package …\nThis is a registry source, e.g. …\nA revision (commit hash), e.g. …\nReverse dependencies from other packages to this one.\nThe string <code>&quot;?tag=&quot;</code>.\nA tag, e.g. <code>&quot;guppy-0.5.0&quot;</code>.\nA test target with its name.\nPublication of this package is unrestricted.\nInformation about a workspace, parsed from metadata …\nThis package is in the workspace.\nReturns true if this link should be followed during a …\nReturns true if the given link is accepted by this …\nReturns all the Strongly Connected Components (SCCs) of 2 …\nReturns the authors of this package.\nReturns details about this dependency from the …\nLooks up a build target by identifier.\nReturns all the build targets for this package.\nReturns true if a package can be published to the given …\nReturns true if a package can be published to crates.io.\nSimulations of Cargo behavior.\nReturns categories for this package.\nIf called with true, this resolver will then verify that …\nReturns true if this package ID is contained in this …\nReturns true if the workspace contains a package by the …\nReturns true if the workspace contains a package by the …\nReturns information about dependency cycles in this graph.\nReturns the <code>FeatureId</code> corresponding to the default feature.\nReturns the enabled status of this dependency when …\nReturns the binary that is run by default, if specified.\nReturns the name for this dependency edge. This can be …\nReturns true if <code>package_a</code> depends (directly or indirectly) …\nReturns true if <code>package_a</code> depends (directly or indirectly) …\nReturns a short description for this package.\nReturns details about this dependency from the …\nReturn true if this edge is dev-only, i.e. code from this …\nReturns a <code>PackageSet</code> that contains all packages present in …\nReturns <code>PackageLink</code> instances corresponding to the direct …\nReturns <code>PackageLink</code> instances corresponding to the direct …\nReturns the direction the query is happening in.\nReturns true if <code>package_a</code> directly depends on <code>package_b</code>.\nConstructs a representation of the selected packages in <code>dot</code>…\nReturns true if documentation tests are enabled for this …\nReturns the documentation URL for this package, if …\nReturns the Rust edition for this build target.\nReturns the Rust edition this package is written against.\nEvaluates whether this dependency is enabled (required or …\nReturns the endpoints as a pair of packages <code>(from, to)</code>.\nReturns the external source if this is an external …\nGraph analysis for individual features within a package.\nReturns a derived graph representing every feature of …\nReturns the enabled status of this feature.\nReturns a list of all features possibly enabled by this …\nReturns a <code>PackageSet</code> on which a filter has been applied.\nPerforms filtering and partitioning at the same time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the package which depends on the <code>to</code> package.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes the given <code>MetadataCommand</code> and constructs a …\nConstructs a package graph from the given JSON output of …\nParses the given <code>Metadata</code> and constructs a <code>PackageGraph</code> …\nReturns the package graph this <code>PackageMetadata</code> is derived …\nReturns the package graph on which the query is going to …\nReturns true if this package has a build script.\nReturns true if this package has a named feature named …\nReturns the homepage for this package, if specified.\nReturns the unique identifier for this build target.\nReturns the unique identifier for this package.\nReturns true if this package is in the workspace.\nReturns the list of initial packages specified in the …\nReturns a <code>PackageSet</code> that contains all packages present in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the source is <code>crates.io</code>.\nReturns true if these two IDs are in the same cycle.\nReturns true if no packages were resolved in this set.\nReturns true if this package source represents an external …\nReturns true if this package is a local dependency, i.e. …\nReturns true if a package cannot be published to any …\nReturns true if this dependency is never enabled on any …\nReturns true if this package source represents a path …\nReturns true if there is at least one <code>Cargo.toml</code> entry …\nReturns true if this package is a procedural macro.\nReturns true if this package can be published to any …\nReturns true if this package source represents a workspace.\nReturns an iterator over package metadatas, sorted by the …\nReturns an iterator over workspace names and package …\nReturns an iterator over workspace paths and package …\nReturns keywords for this package.\nReturns the kind of this build target.\nReturns the number of packages in this set.\nReturns an SPDX 2.1 license expression for this package, …\nReturns the path to a license file for this package, if …\nReturns the direct <code>PackageLink</code> between <code>self</code> and <code>other</code> in …\nReturns the number of links in this graph.\nReturns the direct <code>PackageLink</code> from the specified package …\nReturns the direct <code>PackageLink</code> from <code>self</code> to the specified …\nReturns the name of a native library this package links …\nCreates an iterator over <code>PackageLink</code> instances.\nReturns the local path if this is a local dependency, or …\nReturns the full path to the <code>Cargo.toml</code> for this package.\nMaps the given name to the corresponding workspace member.\nMaps the given path to the corresponding workspace member.\nReturns the number of packages in this workspace.\nReturns an iterator over package IDs for workspace …\nMaps the given names to their corresponding workspace …\nMaps the given paths to their corresponding workspace …\nReturns the metadata for the given package ID.\nConverts this <code>SummaryId</code> to a <code>PackageMetadata</code>.\nReturns the freeform metadata table for this workspace.\nReturns the freeform metadata table for this package.\nReturns the minimum Rust compiler version, which should be …\nReturns the name of this build target.\nReturns the name embedded in this identifier, or <code>None</code> if …\nReturns the name of this package.\nReturns the list of named features available for this …\nCreates a new cache for <code>depends_on</code> queries for this …\nAttempts to parse the given string as an external source.\nCreates a new cache for <code>depends_on</code> queries.\nReturns the enabled status of this dependency when …\nReturns details about this dependency from the …\nReturns the opposite direction to this one.\nReturns the <code>PlatformStatus</code> corresponding to whether this …\nReturns the number of packages in this graph.\nReturns an iterator over all the package IDs in this graph.\nIterates over package IDs, in topological order in the …\nReturns an iterator over all the packages in this graph.\nIterates over package metadatas, in topological order in …\nReturns a parallel iterator over package metadatas, sorted …\nReturns a parallel iterator over workspace names and …\nReturns a parallel iterator over workspace paths and …\nAttempts to parse an external source.\nPartitions this <code>PackageSet</code> into two.\nReturns the absolute path of the location where the source …\nReturns a <code>Strategy</code> that generates a random <code>CargoOptions</code> …\nReturns a <code>Strategy</code> that generates random package IDs from …\nReturns a <code>Strategy</code> that generates random package IDs from …\nReturns a <code>Strategy</code> that generates random dependency links …\nReturns a <code>Strategy</code> that generates random package names …\nReturns a <code>Strategy</code> that generates a random <code>PackageResolver</code> …\nReturns the registries to which this package may be …\nCreates a new query that returns transitive dependencies …\nCreates a new query that returns transitive dependencies …\nCreates a new query that returns transitive reverse …\nCreates a new forward query over the entire workspace.\nCreates a new forward query over the specified workspace …\nCreates a new forward query over the specified workspace …\nReturns a path to the README for this package, if …\nReturns the source code repository for this package, if …\nReturns details about this dependency from the section …\nReturns the features required for this build target.\nEvaluates whether this dependency is required on the given …\nReturns the <code>PlatformStatus</code> corresponding to whether this …\nResolves this query into a set of known packages, …\nCreates a new <code>PackageSet</code> consisting of all members of this …\nCreates a new <code>PackageSet</code> consisting of the specified …\nCreates a new, empty <code>PackageSet</code> associated with this …\nCreates a new <code>PackageSet</code> consisting of packages with the …\nResolves this query into a set of known packages, using …\nResolves this query into a set of known packages, using …\nCreates a new <code>PackageSet</code> consisting of all packages in …\nCreates a new <code>PackageSet</code> consisting of the specified …\nCreates a new <code>PackageSet</code> consisting of the specified …\nReturns the resolved name for this dependency edge. This …\nReturns <code>PackageLink</code> instances corresponding to the …\nReturns the workspace root.\nReturns the set of “root package” IDs in the specified …\nReturns the set of “root package” metadatas in the …\nReturns the minimum Rust compiler version, which should be …\nSets a config option for whether backslashes should be …\nReturns the source from which this package was retrieved.\nReturns true if the query starts from the given package ID.\nReturns the enabled status of this dependency.\nGenerate build summaries from <code>CargoSet</code> instances.\nReturns a <code>PackageSet</code> that contains all packages present in …\nReturns the target directory in which output artifacts are …\nReturns the package which is depended on by the <code>from</code> …\nConverts this <code>PackageQuery</code> into a <code>FeatureQuery</code>, using the …\nCreates a <code>FeatureSet</code> that consists of all features in the …\nCreates a new <code>FeatureSet</code> consisting of all packages in …\nCreates a <code>PackageQuery</code> consisting of this package, in the …\nCreates a new <code>PackageQuery</code> from this set in the specified …\nCreates a <code>PackageSet</code> consisting of just this package.\nConverts <code>self</code> into a <code>GitReqSummary</code>.\nConverts this <code>PackageSet</code> to a serializable …\nConverts this metadata to a <code>SummaryId</code>.\nConverts a <code>PackageSource</code> into a <code>SummarySource</code>.\nReturns a <code>PackageSet</code> that contains all packages present in …\nReturns the version of this package as resolved by Cargo.\nReturns the semver requirements specified for this …\nVisits this dependency link. The implementation may output …\nVisits this package. The implementation may output a label …\nReturns information about the workspace.\nReturns the path if this is a workspace dependency, or <code>None</code>…\nGlue for usage of the <code>write!</code> macro.\nThe repository for this Git source. For the above example, …\nThe revision requested in <code>Cargo.toml</code>. This may be a tag, a …\nThe resolved revision, as specified in <code>Cargo.lock</code>.\nEither the target or the host platform.\nOptions for queries which simulate what Cargo does.\nThe version of Cargo’s feature resolver to use.\nA set of packages and features, as would be built by Cargo.\nAssume that the initials are being built on the host …\nThe host platform.\nFor a given Cargo build simulation, what platform to …\nPerform a standard build, and also build proc-macros on …\nAssume a standard build.\nThe target platform.\nThe “classic” feature resolver in Rust.\nThe “classic” feature resolver in Rust, as used by …\nVersion 2 of the feature resolver, available since Rust …\nA list of all possible variants of <code>BuildPlatform</code>.\nOmits edges into the given packages.\nReturns the set of workspace and direct dependency …\nReturns the feature sets across the target and host build …\nReturns <code>PackageLink</code> instances for build dependencies from …\nReturns the feature graph for this <code>CargoSet</code> instance.\nReturns the packages and features that took part in …\nReturns the build platform that’s not <code>self</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the set of workspace and direct dependency …\nReturns the feature set enabled on the host platform.\nReturns the initial packages and features from which the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CargoOptions</code> with this resolver version and …\nSimulates a Cargo build of this feature set, with the …\nReturns the package graph for this <code>CargoSet</code> instance.\nReturns the set of workspace and direct dependency …\nReturns the feature set enabled on the specified build …\nReturns <code>PackageLink</code> instances for procedural macro …\nSets the host platform to the provided spec.\nIf set to true, causes dev-dependencies of the initial set …\nConfigures the way initials are treated on the target and …\nSets both the target and host platforms to the provided …\nSets the Cargo feature resolver version.\nSets the target platform to the provided spec.\nReturns the set of workspace and direct dependency …\nReturns the feature set enabled on the target platform.\nCreates a build summary with the given options.\nAll features. Equivalent to <code>cargo build --all-features</code>.\nThe “base” feature. Every package has one such feature.\nThe “base” feature. Every package has one such feature.\nA feature dependency that is conditionally activated.\nContains information about dependency cycles in feature …\nDefault features. Equivalent to a standard <code>cargo build</code>.\nTrait representing whether a feature within a package …\nA <code>FeatureFilter</code> which calls the function that’s passed …\nA derived graph representing every feature of every …\nAn identifier for a (package, feature) pair in a feature …\nThe kind of a particular feature within a package.\nA unique identifier for a feature within a specific …\nMetadata for a feature within a package.\nA query over a feature graph.\nRepresents whether a particular link within a feature …\nA set of resolved feature IDs in a feature graph.\nThis is a named feature in the <code>[features]</code> section, or an …\nThis is a named feature in the <code>[features]</code> section, or an …\nNo features. Equivalent to a build with …\nThis is an optional dependency.\nThis is an optional dependency.\nDescribes one of the standard sets of features recognized …\nA list of all the possible values of <code>StandardFeatures</code>.\nReturns true if this feature ID should be selected in the …\nReturns true if this conditional link should be followed …\nReturns all the cycles of 2 or more elements in this graph.\nReturns all known features for a package.\nCreates a new <code>FeatureId</code> representing the base feature for …\nReturns details about this feature dependency from the …\nReturns any non-fatal warnings encountered while …\nCreates an iterator over <code>ConditionalLink</code> instances in the …\nReturns true if this feature graph contains the specified …\nReturns true if this set contains the given feature ID.\nReturns true if this set contains this package.\nReturns information about dependency cycles.\nReturns true if <code>feature_a</code> depends (directly or indirectly) …\nReturns details about this feature dependency from the …\nReturns true if this edge is dev-only, i.e. code from this …\nReturns a <code>FeatureSet</code> that contains all packages present in …\nReturns the direction the query is happening in.\nReturns true if <code>feature_a</code> directly depends on <code>feature_b</code>.\nReturns the endpoints as a pair of features <code>(from, to)</code>.\nReturns the total number of (package ID, feature) …\nReturns the feature ID corresponding to this metadata.\nReturns a <code>FeatureFilter</code> that selects everything from the …\nIterates over feature IDs, in topological order in the …\nA sorted, deduplicated list of features from a single …\nIterates over feature metadatas, in topological order in …\nReturns a list of features present for this package, or …\nReturns a <code>PackageSet</code> on which a filter has been applied.\nPerforms filtering and partitioning at the same time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the feature which depends on the <code>to</code> feature.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the feature graph the query is going to be …\nReturns the <code>FeatureGraph</code> that this feature set was …\nReturns the list of initial packages specified in the …\nReturns the list of initial features specified in the …\nReturns a <code>FeatureSet</code> that contains all packages present in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this feature set into a Cargo set, simulating a …\nReturns true if this is the base feature for the package.\nReturns true if this is the base feature.\nReturns true if these two IDs are in the same cycle.\nReturns true if this feature is included in a package’s …\nReturns true if no feature IDs were resolved in this set.\nReturns true if this is a named feature.\nReturns true if this is a named feature.\nReturns true if this is an optional dependency.\nReturns true if this is an optional dependency.\nReturns the kind of feature this is.\nReturns the <code>FeatureLabel</code> associated with the feature.\nReturns the label for this feature.\nReturns the number of feature IDs in this set.\nReturns the number of links in this graph.\nReturns metadata for the given feature ID, or <code>None</code> if the …\nCreates a new <code>FeatureId</code> representing a named feature in …\nReturns a <code>FeatureFilter</code> that selects everything from the …\nCreates a new <code>FeatureId</code> with the given <code>PackageId</code> and …\nReturns a new instance of this wrapper.\nReturns details about this feature dependency from the …\nCreates a new <code>FeatureId</code> representing an optional …\nReturns the package metadata corresponding to this feature …\nReturns the <code>PackageGraph</code> from which this feature graph was …\nReturns the package ID.\nReturns the package ID corresponding to this metadata.\nReturns the <code>PackageLink</code> from which this <code>ConditionalLink</code> …\nIterates over package metadatas and their corresponding …\nPartitions this <code>PackageSet</code> into two.\nReturns a <code>Strategy</code> that generates random feature IDs from …\nReturns a <code>Strategy</code> that generates random feature sets from …\nCreates a new query that returns transitive dependencies …\nCreates a new query that returns transitive dependencies …\nCreates a new query that returns transitive reverse …\nCreates a new query over the entire workspace.\nResolves this query into a set of known feature IDs.\nCreates a new <code>FeatureSet</code> consisting of all members of this …\nCreates a new <code>FeatureSet</code> consisting of the specified …\nCreates a new, empty <code>FeatureSet</code> associated with this …\nResolves this query into a set of known feature IDs, using …\nResolves this query into a set of known feature IDs, using …\nReturns the set of “root feature” metadatas in the …\nReturns the set of “root feature” IDs in the specified …\nReturns true if the query starts from the given feature ID.\nReturns true if the query starts from the given package.\nReturns details about this feature dependency from the …\nReturns a <code>FeatureSet</code> that contains all packages present in …\nReturns the feature which is depended on by the <code>from</code> …\nCreates a new <code>FeatureQuery</code> from this set in the specified …\nConverts this <code>FeatureSet</code> into a <code>PackageSet</code> containing all …\nReturns a <code>FeatureSet</code> that contains all packages present in …\nA pretty-printer for a list of features.\nA sorted, deduplicated list of features from a single …\nAn owned iterator over a <code>FeatureList</code>.\nA borrowed iterator over a <code>FeatureList</code>.\nReturns true if this feature list contains this feature …\nReturns a pretty-printer over the list of feature labels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if this feature list contains the “base” …\nReturns true if this feature list contains the specified …\nReturns true if this feature list contains the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a vector of feature labels.\nReturns a borrowed iterator over feature IDs.\nReturns the list of labels as a slice.\nReturns an iterator containing all named features.\nCreates a new iterator.\nCreates a new iterator.\nCreates a new <code>FeatureList</code> from a package and an iterator …\nReturns an iterator containing all optional dependencies.\nReturns the package corresponding to this feature list.\nA branch, e.g. <code>&quot;main&quot;</code>.\nA summary of Cargo options used to build a <code>CargoSet</code>.\nThe <code>crates.io</code> registry.\nThe main branch by default.\nThis package is a direct non-workspace dependency.\nAn external source that’s not the <code>crates.io</code> registry, …\nSummary information for a features-only package.\nA dependency on a Git repository.\nA summary specification for a Git branch, tag or revision.\nThis package is part of the requested build set.\nSummary information for <code>InitialsPlatform</code>.\nInformation about a package in a summary that isn’t part …\nA type representing a package map as used in <code>Summary</code> …\nA set of packages specified in a summary. Can be resolved …\nThe status of a package in a summary, such as whether it …\nA non-workspace path.\nA path dependency, relative to the workspace root.\nA dependency on a registry. <code>crates.io</code> is represented as …\nA revision (commit hash), e.g. …\nAn in-memory representation of a build summary.\nA unique identifier for a package in a build summary.\nThe location of a package.\nA tag, e.g. <code>&quot;guppy-0.5.0&quot;</code>.\nDescribes locations where non-workspace packages (path or …\nA selector for external, third-party packages.\nThis package is a transitive non-workspace dependency.\nA URL not otherwise recognized.\nThe first version of this option, which only allowed …\nThe second and current version of this option.\nA workspace path.\nThis is a workspace package that isn’t part of the …\nConverts <code>self</code> into a <code>GitReq</code>.\nCreates a new <code>SummarySource</code> representing the <code>crates.io</code> …\nCompare and diff summaries.\nPerform a diff of this summary against another.\nCreates a new <code>SummarySource</code> representing an external …\nThe features built for this package.\nThe named features built for this package.\nThe packages that formed the features-only set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>PackageSetSummary</code> from an iterator of …\nThe packages and features built on the host platform.\nThe host platform.\nWhether dev-dependencies are included.\nThe platform for which the initials are specified.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>PackageSetSummary</code> is empty.\nExtra metadata associated with the summary.\nThe name of the package.\nThe name of the package. Must be specified.\nCreates a new <code>SummaryId</code>.\nConstructs a <code>PackageSetSummary</code> from a <code>PackageSet</code>.\nCreates a new <code>GitReqSummary</code> from the provided <code>GitReq</code>.\nCreates a new <code>CargoOptionsSummary</code> from the given Cargo …\nThe set of packages omitted from computations.\nThe optional dependencies built for this package.\nThe optional dependencies built for this package.\nDeserializes a summary from the given string, with …\nCreates a new <code>SummarySource</code> representing a non-workspace …\nThe Cargo resolver version used.\nSerializes a path with forward slashes on Windows.\nThe source for this package.\nWhere this package can be found. Can be skipped, in which …\nWhere this package lies in the dependency graph.\nThe summary ID for this feature.\nA set of summary identifiers. Typically used in generated …\nThe packages and features built on the target platform.\nThe target platform.\nNon-workspace packages, including non-workspace path …\nCreates a new <code>CargoOptions</code> from this summary.\nConverts this <code>PackageSetSummary</code> to a <code>PackageSet</code>.\nConverts this <code>PackageSetSummary</code> to a <code>PackageSet</code>, with the …\nSerializes this summary to a TOML string.\nThe version number of the package.\nA version specifier for the package. Can be skipped: …\nConstructs a new summary with the provided metadata, and …\nCreates a new <code>SummarySource</code> representing a workspace …\nWorkspace packages, specified by names. Typically used in …\nSerializes this summary into the given TOML string, using …\nThe configuration value.\nIf set to true, this is treated as …\nThe path of this package.\nThe external source.\nThe path of this package, relative to the workspace root.\nThe repository path.\nThe Git branch, tag or revision, if specified.\nThis package was added.\nThis package was added.\nSome details about the package changed:\nThis package was modified.\nA diff from a particular section of a summary.\nThis package was removed.\nThis package was removed.\nA diff of two package summaries.\nThe diff status for a particular summary ID and source.\nA tag representing <code>SummaryDiffStatus</code> except with no data …\nA report of a diff between two summaries.\nType alias for list entries in the <code>PackageDiff::unchanged</code> …\nChanged packages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDiff of host packages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are any changes in this diff.\nReturns true if there are no changes in this diff.\nReturns true if there are no changes in this diff.\nReturns the new package status if available, otherwise the …\nComputes a diff between two summaries.\nConstructs a new <code>PackageDiff</code> from a pair of <code>PackageMap</code> …\nCreates a new <code>SummaryReport</code> that can be displayed.\nReturns a report for this diff.\nReturns the tag for this status.\nDiff of target packages.\nUnchanged packages, keyed by name.\nThe set of features added to the package.\nThe set of optional dependencies added to the package.\nThe information for this package.\nThe current status of this package.\nThe information this package used to have.\nThe old source of this package, if the source changed.\nThe old status of this package, if the status changed.\nThe old version of this package, if the version changed.\nThe set of features removed from the package.\nThe set of optional dependencies removed from the package.\nThe set of features which were enabled both in both the …\nThe set of optional dependencies enabled both in both the …\nMatch all features.\nMatch all features.\nThis dependency or feature is always enabled on all …\nThe intersection of all platforms.\nThe intersection of all platforms.\nThe union of all platforms.\nThe union of all platforms.\nThe dependency is disabled on this platform.\nThe dependency is enabled on this platform.\nWhether a dependency or feature is enabled on a specific …\nOnly match the specified features.\nOnly match the specified features.\nThis dependency or feature is never enabled on any …\nA platform to evaluate target specifications against.\nAn individual platform.\nAn individual platform.\nThe status is platform-dependent.\nAn evaluator for platform-specific dependencies.\nA specifier for a single platform, or for a range of …\nA serializable version of <code>PlatformSpec</code>.\nThe status of a dependency or feature, which is possibly …\nAn owned, serializable version of <code>Platform</code>.\nA set of target features to match.\nAn owned, serializable version of <code>TargetFeatures</code>.\nA single, specific target, uniquely identified by a triple.\nThe target features are unknown.\nThe target features are unknown.\nThe status of this dependency is unknown on this platform.\nAdds a set of flags to accept.\nReturns the string corresponding to this triple.\nReturns the current platform, as detected at build time.\nReturns a <code>PlatformSpec</code> corresponding to the current …\nJSON for custom platforms.\nEvaluates whether this dependency is enabled on the given …\nEvaluates this triple against the given platform.\nRuns this evaluator against the given platform.\nCreates a new <code>TargetFeatures</code> which matches some features.\nA version of <code>strategy</code> that allows target triples to be …\nReturns the set of flags enabled for this platform.\nThe flags enabled.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>PlatformSummary</code> instance from a platform.\nCreates a new standard platform from a <code>Triple</code> and target …\nReturns true if this flag was set with <code>add_flags</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this dependency is always enabled on all …\nReturns true if <code>self</code> is <code>PlatformSpecSummary::Any</code>.\nReturns true if this is a builtin platform.\nReturns true if this is a triple corresponding to a …\nReturns true if this is a custom platform.\nReturns true if this is a custom platform.\nReturns true if this is a heuristically determined …\nReturns true if this triple was heuristically determined.\nReturns true if the status is known (either enabled or …\nReturns true if this dependency is never enabled on any …\nReturns true if this dependency is possibly enabled on any …\nReturns true if this is a standard platform.\nReturns true if this is a triple corresponding to a …\nReturns <code>Some(true)</code> if this feature is a match, <code>Some(false)</code> …\nCreates a new standard <code>Platform</code> from the given triple and …\nCreates a new <code>PlatformSummary</code> with the provided triple and …\nCreates a new <code>TargetFeaturesSummary</code> from a <code>TargetFeatures</code>.\nCreates a new <code>Triple</code> from a triple string.\nCreates a new <code>PlatformSpecSummary</code> from a <code>PlatformSpec</code>.\nCreates a new custom <code>Platform</code> from the given triple, …\nCreates a new custom <code>Triple</code> from the given triple string …\nCreates a new standard <code>Platform</code> from the given triple and …\nCreates a new <code>Triple</code> from a triple string.\nCreates a new <code>TargetFeatures</code> which doesn’t match any …\nGiven a way to generate <code>TargetFeatures</code> instances, this …\nReturns a <code>Strategy</code> that generates a random <code>PlatformSpec</code> …\nReturns the set of target features for this platform.\nThe target features used.\nConverts <code>self</code> to a <code>Platform</code>.\nConverts <code>self</code> to a <code>PlatformSpec</code>.\nConverts this <code>Platform</code> to a serializable form.\nConverts <code>self</code> to a <code>TargetFeatures</code> instance.\nReturns the underlying <code>Triple</code>.\nThe platform triple.\nReturns the target triple string for this platform.\nAdds flags for this platform.\nIf this represents a custom platform, sets the target …\nSets the target features for this platform.\nAn evaluator to run queries against.")