searchState.loadedDescShard("hakari", 0, "<code>hakari</code> is the library underlying <code>cargo hakari</code>, a tool to …\nAutomatically choose between the <code>UnifyIfBoth</code> and the …\nThe string <code>&quot;\\n### BEGIN HAKARI SECTION\\n&quot;</code>. This string …\nAn error that can occur while reading or writing a …\nFormat version for hakari.\nThe string <code>&quot;\\n### END HAKARI SECTION\\n&quot;</code>. This string marks …\nAn error occurred while writing to a <code>fmt::Write</code> instance.\n<code>workspace-hack = { version = &quot;0.1&quot;, path = ... }</code>.\nThe <code>Cargo.toml</code> was successfully read but …\nThe result of a Hakari computation.\nConfigures and constructs <code>Hakari</code> instances.\nSupport for maintaining <code>Cargo.toml</code> files that unify …\nOptions for Hakari TOML output.\nThe contents of the <code>Cargo.toml</code> file could not be read or …\nPerform no unification across the target and host feature …\nAttempted to output a path dependency, but a Hakari …\nAn error occurred while serializing platform information.\nPerform unification across target and host feature sets, …\nAn error occurred while serializing TOML.\nAn error that occurred while writing out TOML.\nPerform unification across target and host feature sets, …\nWhether to unify feature sets for a given dependency …\nAn external source wasn’t recognized by guppy.\nAn external registry was found and wasn’t passed into …\n<code>workspace-hack = { path = ...}</code>. (Note the lack of a …\n<code>workspace-hack = { version = &quot;0.1&quot;, path = ... }</code>. This was …\nElides build metadata. This was introduced in …\nSorts dependency names alphabetically. This was introduced …\n<code>workspace-hack = { version = &quot;0.1&quot; }</code>.\n<code>workspace-hack.workspace = true</code>\nStyle of <code>workspace-hack = ...</code> lines to output.\nReturns the set of operations that need to be performed to …\nAdds packages to be removed from the final output.\nAdd alternate registries by (name, URL) pairs.\nPretends that the provided packages don’t exist during …\nReturns the <code>HakariBuilder</code> used to create this instance.\nCommand-line operations for <code>hakari</code>.\nComputes the <code>Hakari</code> for this builder.\nThe complete map of dependency build results built by …\nReturns the contents of the file on disk as read at …\nReturns the current value of <code>dep_format_version</code>.\nComputes the diff between the contents on disk and the …\nRe-export diffy.\nInformation about why a dependency is in the …\nReturns a <code>HakariExplain</code>, which can be used to print out …\nReturns the packages to be removed from the final output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>HakariBuilder</code> from a <code>PackageGraph</code> and a …\nReturns the part of the file that is treated as generated.\nReturns the start and end offsets of the part of the file …\nReturns the <code>PackageGraph</code> used to construct this <code>Hakari</code> …\nReturns the Hakari package, or <code>None</code> if it wasn’t passed …\nAccess to internal Hakari data structures.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the contents on disk are different from …\nReturns true if a package ID is excluded from either the …\nReturns true if a package ID is currently excluded from …\nReturns true if a package ID is currently excluded during …\nReturns the highest format version supported by this …\nReturns the set of operations that need to be performed to …\nCreates a new instance of <code>HakariCargoToml</code> with the …\nCreates a new <code>HakariBuilder</code> instance from a <code>PackageGraph</code>.\nCreates a new instance with default settings.\nCreates a new instance of <code>HakariCargoToml</code> with the given …\nCreates a new instance of <code>HakariCargoToml</code> at the given …\nThe map built by Hakari of dependencies that need to be …\nReturns the current value of <code>output_single_feature</code>.\nReturns the platforms set through <code>set_platforms</code>, or an …\nReturns a <code>Strategy</code> that generates random <code>HakariBuilder</code> …\nReads the existing TOML file for the Hakari package from …\nReads the existing TOML file for the Hakari package from …\nReturns the set of operations that need to be performed to …\nReturns the current Cargo resolver version.\nIf set to true, outputs absolute paths for path …\nIf set to true, outputs a summary of the builder options …\nVersion of hakari data to output.\nIf set to true, outputs exact versions in package version …\nWhether to unify feature sets for all dependencies.\nSets a list of platforms for <code>hakari</code> to use.\nSets the Cargo resolver version.\nWhether and how to unify feature sets across target and …\nKind of <code>workspace-hack = ...</code> lines to output.\nManage configuration and generate summaries for <code>hakari</code>.\nConverts this <code>HakariBuilder</code> to a serializable summary.\nA convenience method around <code>write_toml</code> that returns a new …\nReturns a map of dependency names as present in the …\nReturns the toml path provided at construction time.\nReturns the packages currently excluded during graph …\nReturns the current value of <code>unify_target_host</code>.\nCode related to ensuring that <code>hakari</code> works properly.\nVerify that <code>hakari</code> worked properly.\nReturns the current value of <code>workspace_hack_line_style</code>.\nWrites out the full contents, including the provided TOML, …\nWrites out the provided TOML to the generated section of …\nWrites out the full contents, including the provided TOML, …\nWrites <code>[dependencies]</code> and other <code>Cargo.toml</code> lines to the …\nThe error that occurred.\nThe path that was attempted to be read.\nThe path that was read.\nA context string for the error.\nThe underlying error.\nThe package ID that Hakari tried to write out a dependency …\nThe package ID that Hakari tried to write out a dependency …\nThe package ID that Hakari tried to write out a dependency …\nThe registry URL that wasn’t recognized.\nThe relative path to the package from the root of the …\nThe source string that wasn’t recognized.\nAn error that occurred while writing out changes to a …\nThe configuration path already exists.\nManages initialization of a workspace-hack package.\nAn error that occurred while attempting to initialize …\nAn IO error occurred while working with the given path.\nThe provided package name already exists.\nRepresents a set of write operations to the workspace.\nA display formatter for <code>WorkspaceOps</code>.\nThe provided workspace directory is non-empty.\nThe provided path is not within the workspace root.\nApply these workspace operations.\nAdds ANSI color codes to the output.\nReturns a displayer for the workspace operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if no workspace operations are specified.\nReturns the workspace operations corresponding to this …\nReturns the message corresponding to the error.\nCreates a new <code>HakariInit</code> with the given options. Writes …\nReturns the path at which the error occurred.\nSpecifies a comment, in TOML format, to add to the top of …\nSpecifies a path, relative to the workspace root, where a …\nThe absolute path of the configuration file.\nThe absolute workspace path.\nThe absolute workspace path.\nThe error.\nThe package name that exists.\nThe path.\nThe path at which it exists, relative to the root.\nThe workspace root.\nThe result of a Hakari explain query.\nA display formatter for <code>HakariExplain</code>.\nAdds ANSI color codes to the output.\nReturns <code>PackageMetadata</code> for the dependency associated with …\nReturns a displayer for the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA target map or a host map in a <code>ComputedValue</code>.\nThe values of <code>ComputedInnerMap</code>.\nThe map of all build results computed by Hakari.\nThe values of a <code>ComputedMap</code>.\nA key representing a platform and host/target. Returned by …\nThe map used by Hakari to generate output TOML.\nThe build platform: target or host.\nWhether at least one post-computation fixup was performed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the inner map corresponding to the …\nReturns a mutable reference to the inner map corresponding …\nThe feature sets built on the host platform.\nReturns both the inner maps along with the build platforms …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into <code>ComputedInnerMap</code> instances, along with …\nThe index of the build platform for this key, or <code>None</code> if …\nThe feature sets built on the target platform.\nThe workspace packages, selected features, and include dev …\nThe location of the configuration used by <code>cargo hakari</code>, …\nThe fallback location, used by previous versions of …\nA <code>HakariBuilder</code> in serializable form. This forms the …\nConfiguration for <code>hakari</code>.\nOptions for <code>hakari</code> TOML output, in serializable form.\nBuilder options.\nFormat version for hakari.\nThe list of packages excluded from the final output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a <code>HakariConfig</code> from the given TOML string.\nThe name of the Hakari package in the workspace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>HakariBuilderSummary</code> from a builder.\nCreates a new <code>OutputOptionsSummary</code>.\nOutput options.\nWhether all dependencies were unified.\nThe platforms used by the <code>HakariBuilder</code>.\nThe list of alternate registries, as a map of name to URL.\nThe Cargo resolver version used.\nCreates a <code>HakariBuilder</code> from this summary and a …\nConverts this summary to the options.\nSerializes this summary to a TOML string.\nThe list of packages excluded during graph traversals.\nUnification across target and host.\nFormat kind for <code>workspace-hack = { ... }</code> lines.\nSerializes this summary to a TOML string, and adds <code>#</code> …\nWrites out the contents of this summary as TOML to the …\nContext for errors returned by <code>HakariBuilder::verify</code>.\nA display formatter for <code>VerifyErrors</code>.\nAdds ANSI color codes to the output.\nThe dependency package IDs that were built with more than …\nReturns a displayer for this instance.\nReturns individual verification errors as <code>HakariExplain</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Hakari instance used to compute the errors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")