(function() {
    var type_impls = Object.fromEntries([["bimap",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BiHashMap%3CL,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#26-63\">source</a><a href=\"#impl-BiHashMap%3CL,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html\" title=\"struct std::hash::random::RandomState\">RandomState</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html\" title=\"struct std::hash::random::RandomState\">RandomState</a>&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#40-45\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>BiHashMap</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span>bimap = BiHashMap::&lt;char, i32&gt;::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#57-62\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>BiHashMap</code> with the given capacity.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span>bimap = BiHashMap::&lt;char, i32&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details></div></details>",0,"bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#216-647\">source</a><a href=\"#impl-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hashers\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#237-242\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.with_hashers\" class=\"fn\">with_hashers</a>(hash_builder_left: LS, hash_builder_right: RS) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>BiHashMap</code> using <code>hash_builder_left</code> to hash left\nvalues and <code>hash_builder_right</code> to hash right values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n<span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span>s_left = RandomState::new();\n<span class=\"kw\">let </span>s_right = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::&lt;char, i32&gt;::with_hashers(s_left, s_right);\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hashers\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#259-268\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.with_capacity_and_hashers\" class=\"fn\">with_capacity_and_hashers</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    hash_builder_left: LS,\n    hash_builder_right: RS,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new empty <code>BiHashMap</code> with the given capacity, using\n<code>hash_builder_left</code> to hash left values and <code>hash_builder_right</code> to\nhash right values.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n<span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span>s_left = RandomState::new();\n<span class=\"kw\">let </span>s_right = RandomState::new();\n<span class=\"kw\">let </span>bimap = BiHashMap::&lt;char, i32&gt;::with_capacity_and_hashers(<span class=\"number\">10</span>, s_left, s_right);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#287-290\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>BiHashMap</code>. The collection may reserve more space to avoid\nfrequent reallocations.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <a href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::&lt;char, i32&gt;::new();\nbimap.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#308-311\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the bimap as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::&lt;char, i32&gt;::with_capacity(<span class=\"number\">100</span>);\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">100</span>);\nbimap.shrink_to_fit();\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#334-337\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the bimap with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal\nrules and possibly leaving some space in accordance with the resize\npolicy.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::&lt;char, i32&gt;::with_capacity(<span class=\"number\">100</span>);\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">100</span>);\nbimap.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">10</span>);\nbimap.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_by_left\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#355-361\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.get_by_left\" class=\"fn\">get_by_left</a>&lt;Q&gt;(&amp;self, left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the right value corresponding to the given left\nvalue.</p>\n<p>The input may be any borrowed form of the bimap’s left type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the left type.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'z'</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_by_right\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#379-385\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.get_by_right\" class=\"fn\">get_by_right</a>&lt;Q&gt;(&amp;self, right: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;L</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the left value corresponding to the given right\nvalue.</p>\n<p>The input may be any borrowed form of the bimap’s right type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the right type.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_left\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#403-409\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.contains_left\" class=\"fn\">contains_left</a>&lt;Q&gt;(&amp;self, left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the bimap contains the given left value and <code>false</code>\notherwise.</p>\n<p>The input may be any borrowed form of the bimap’s left type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the left type.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(bimap.contains_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>));\n<span class=\"macro\">assert!</span>(!bimap.contains_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'b'</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_right\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#427-433\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.contains_right\" class=\"fn\">contains_right</a>&lt;Q&gt;(&amp;self, right: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains the given right value and <code>false</code>\notherwise.</p>\n<p>The input may be any borrowed form of the bimap’s right type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the right type.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(bimap.contains_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(!bimap.contains_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_by_left\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#456-470\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.remove_by_left\" class=\"fn\">remove_by_left</a>&lt;Q&gt;(&amp;mut self, left: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes the left-right pair corresponding to the given left value.</p>\n<p>Returns the previous left-right pair if the map contained the left value\nand <code>None</code> otherwise.</p>\n<p>The input may be any borrowed form of the bimap’s left type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the left type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(bimap.remove_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'b'</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">'b'</span>, <span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(bimap.remove_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'b'</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_by_right\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#493-507\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.remove_by_right\" class=\"fn\">remove_by_right</a>&lt;Q&gt;(&amp;mut self, right: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes the left-right pair corresponding to the given right value.</p>\n<p>Returns the previous left-right pair if the map contained the right\nvalue and <code>None</code> otherwise.</p>\n<p>The input may be any borrowed form of the bimap’s right type, but <code>Eq</code>\nand <code>Hash</code> on the borrowed form <em>must</em> match those for the right type.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(bimap.remove_by_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>((<span class=\"string\">'b'</span>, <span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(bimap.remove_by_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#558-575\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, left: L, right: R) -&gt; <a class=\"enum\" href=\"bimap/enum.Overwritten.html\" title=\"enum bimap::Overwritten\">Overwritten</a>&lt;L, R&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts the given left-right pair into the bimap.</p>\n<p>Returns an enum <code>Overwritten</code> representing any left-right pairs that\nwere overwritten by the call to <code>insert</code>. The example below details\nall possible enum variants that can be returned.</p>\n<h5 id=\"warnings\"><a class=\"doc-anchor\" href=\"#warnings\">§</a>Warnings</h5>\n<p>Somewhat paradoxically, calling <code>insert()</code> can actually reduce the size\nof the bimap! This is because of the invariant that each left value\nmaps to exactly one right value and vice versa.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::{BiHashMap, Overwritten};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">0</span>); <span class=\"comment\">// {}\n\n// no values are overwritten.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>), Overwritten::Neither);\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">1</span>); <span class=\"comment\">// {'a' &lt;&gt; 1}\n\n// no values are overwritten.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>), Overwritten::Neither);\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">2</span>); <span class=\"comment\">// {'a' &lt;&gt; 1, 'b' &lt;&gt; 2}\n\n// ('a', 1) already exists, so inserting ('a', 4) overwrites 'a', the left value.\n// the previous left-right pair ('a', 1) is returned.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">4</span>), Overwritten::Left(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">2</span>); <span class=\"comment\">// {'a' &lt;&gt; 4, 'b' &lt;&gt; 2}\n\n// ('b', 2) already exists, so inserting ('c', 2) overwrites 2, the right value.\n// the previous left-right pair ('b', 2) is returned.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">2</span>), Overwritten::Right(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">2</span>); <span class=\"comment\">// {'a' &lt;&gt; 1, 'c' &lt;&gt; 2}\n\n// both ('a', 4) and ('c', 2) already exist, so inserting ('a', 2) overwrites both.\n// ('a', 4) has the overwritten left value ('a'), so it's the first tuple returned.\n// ('c', 2) has the overwritten right value (2), so it's the second tuple returned.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">2</span>), Overwritten::Both((<span class=\"string\">'a'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'c'</span>, <span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">1</span>); <span class=\"comment\">// {'a' &lt;&gt; 2} // bimap is smaller than before!\n\n// ('a', 2) already exists, so inserting ('a', 2) overwrites the pair.\n// the previous left-right pair ('a', 2) is returned.\n</span><span class=\"macro\">assert_eq!</span>(bimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">2</span>), Overwritten::Pair(<span class=\"string\">'a'</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">1</span>); <span class=\"comment\">// {'a' &lt;&gt; 2}</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_no_overwrite\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#595-602\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.insert_no_overwrite\" class=\"fn\">insert_no_overwrite</a>(&amp;mut self, left: L, right: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts the given left-right pair into the bimap without overwriting any\nexisting values.</p>\n<p>Returns <code>Ok(())</code> if the pair was successfully inserted into the bimap.\nIf either value exists in the map, <code>Err((left, right)</code> is returned\nwith the attempted left-right pair and the map is unchanged.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\n<span class=\"macro\">assert_eq!</span>(bimap.insert_no_overwrite(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(bimap.insert_no_overwrite(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(bimap.insert_no_overwrite(<span class=\"string\">'a'</span>, <span class=\"number\">3</span>), <span class=\"prelude-val\">Err</span>((<span class=\"string\">'a'</span>, <span class=\"number\">3</span>)));\n<span class=\"macro\">assert_eq!</span>(bimap.insert_no_overwrite(<span class=\"string\">'c'</span>, <span class=\"number\">2</span>), <span class=\"prelude-val\">Err</span>((<span class=\"string\">'c'</span>, <span class=\"number\">2</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#624-637\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;L</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all left-right pairs <code>(l, r)</code> such that <code>f(&amp;l, &amp;r)</code> returns <code>false</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\nbimap.retain(|<span class=\"kw-2\">&amp;</span>l, <span class=\"kw-2\">&amp;</span>r| r &gt;= <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'b'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'c'</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(bimap.get_by_left(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#65-214\">source</a><a href=\"#impl-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#83-85\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of left-right pairs in the bimap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(bimap.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#102-104\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the bimap contains no left-right pairs, and <code>false</code>\notherwise.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\n<span class=\"macro\">assert!</span>(bimap.is_empty());\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!bimap.is_empty());\nbimap.remove_by_right(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(bimap.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#117-119\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns a lower bound on the number of left-right pairs the <code>BiHashMap</code>\ncan store without reallocating memory.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span>bimap = BiHashMap::&lt;char, i32&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(bimap.capacity() &gt;= <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#135-138\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all left-right pairs from the bimap.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\nbimap.clear();\n<span class=\"macro\">assert!</span>(bimap.len() == <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#159-163\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.Iter.html\" title=\"struct bimap::hash::Iter\">Iter</a>&lt;'_, L, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, L, R&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an iterator over the left-right pairs in the bimap in arbitrary\norder.</p>\n<p>The iterator element type is <code>(&amp;L, &amp;R)</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n\n<span class=\"kw\">for </span>(left, right) <span class=\"kw\">in </span>bimap.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"({}, {})\"</span>, left, right);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left_values\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#184-188\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.left_values\" class=\"fn\">left_values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.LeftValues.html\" title=\"struct bimap::hash::LeftValues\">LeftValues</a>&lt;'_, L, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"LeftValues&lt;&#39;_, L, R&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an iterator over the left values in the bimap in arbitrary\norder.</p>\n<p>The iterator element type is <code>&amp;L</code>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n\n<span class=\"kw\">for </span>char_value <span class=\"kw\">in </span>bimap.left_values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, char_value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.right_values\" class=\"method\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#209-213\">source</a><h4 class=\"code-header\">pub fn <a href=\"bimap/hash/struct.BiHashMap.html#tymethod.right_values\" class=\"fn\">right_values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.RightValues.html\" title=\"struct bimap::hash::RightValues\">RightValues</a>&lt;'_, L, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RightValues&lt;&#39;_, L, R&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an iterator over the right values in the bimap in arbitrary\norder.</p>\n<p>The iterator element type is <code>&amp;R</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bimap::BiHashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bimap = BiHashMap::new();\nbimap.insert(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\nbimap.insert(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);\nbimap.insert(<span class=\"string\">'c'</span>, <span class=\"number\">3</span>);\n\n<span class=\"kw\">for </span>int_value <span class=\"kw\">in </span>bimap.right_values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, int_value);\n}</code></pre></div>\n</div></details></div></details>",0,"bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#649-667\">source</a><a href=\"#impl-Clone-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#656-666\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#669-698\">source</a><a href=\"#impl-Debug-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#674-697\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#700-713\">source</a><a href=\"#impl-Default-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#707-712\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(L,+R)%3E-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#779-791\">source</a><a href=\"#impl-Extend%3C(L,+R)%3E-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt; for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#786-790\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(L, R)>","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(L,+R)%3E-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#724-749\">source</a><a href=\"#impl-FromIterator%3C(L,+R)%3E-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt; for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#731-748\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(L, R)>","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#764-777\">source</a><a href=\"#impl-IntoIterator-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#769\">source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(L, R)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#770\">source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"bimap/hash/struct.IntoIter.html\" title=\"struct bimap::hash::IntoIter\">IntoIter</a>&lt;L, R&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#772-776\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"bimap/hash/struct.IntoIter.html\" title=\"struct bimap::hash::IntoIter\">IntoIter</a>&lt;L, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter&lt;L, R&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","bimap::BiMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#793-803\">source</a><a href=\"#impl-PartialEq-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#800-802\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","bimap::BiMap"],["<section id=\"impl-Eq-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#715-722\">source</a><a href=\"#impl-Eq-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section>","Eq","bimap::BiMap"],["<section id=\"impl-Send-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#911-918\">source</a><a href=\"#impl-Send-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","bimap::BiMap"],["<section id=\"impl-Sync-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/bimap/hash.rs.html#919-926\">source</a><a href=\"#impl-Sync-for-BiHashMap%3CL,+R,+LS,+RS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L, R, LS, RS&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"bimap/hash/struct.BiHashMap.html\" title=\"struct bimap::hash::BiHashMap\">BiHashMap</a>&lt;L, R, LS, RS&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    LS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","bimap::BiMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[72555]}